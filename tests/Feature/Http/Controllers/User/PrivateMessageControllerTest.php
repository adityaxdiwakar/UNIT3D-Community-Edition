<?php

uses(RefreshDatabase::class);

test('delete private message returns an ok response', function (): void {
    $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

    $privateMessage = \App\Models\PrivateMessage::factory()->create();

    $response = $this->post(route('delete-pm', ['id' => $privateMessage->id]), [
        // TODO: send request data
    ]);

    $response->assertOk();

    // TODO: perform additional assertions
});

test('empty inbox returns an ok response', function (): void {
    $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');



    $response = $this->delete(route('empty-inbox'));

    $response->assertOk();

    // TODO: perform additional assertions
});

test('get private message by id returns an ok response', function (): void {
    $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

    $privateMessage = \App\Models\PrivateMessage::factory()->create();

    $response = $this->get(route('message', ['id' => $privateMessage->id]));

    $response->assertOk();
    $response->assertViewIs('user.pm.show');
    $response->assertViewHas('pm');
    $response->assertViewHas('user');

    // TODO: perform additional assertions
});

test('get private messages returns an ok response', function (): void {
    $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

    $privateMessages = \App\Models\PrivateMessage::factory()->times(3)->create();

    $response = $this->get(route('inbox'));

    $response->assertOk();
    $response->assertViewIs('user.pm.index');
    $response->assertViewHas('pms');
    $response->assertViewHas('user');

    // TODO: perform additional assertions
});

test('get private messages sent returns an ok response', function (): void {
    $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

    $privateMessages = \App\Models\PrivateMessage::factory()->times(3)->create();

    $response = $this->get(route('outbox'));

    $response->assertOk();
    $response->assertViewIs('user.pm.outbox');
    $response->assertViewHas('pms');
    $response->assertViewHas('user');

    // TODO: perform additional assertions
});

test('make private message returns an ok response', function (): void {
    $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');



    $response = $this->get(route('create'));

    $response->assertOk();
    $response->assertViewIs('user.pm.create');
    $response->assertViewHas('user');
    $response->assertViewHas('receiver_id');
    $response->assertViewHas('username');

    // TODO: perform additional assertions
});

test('mark all as read returns an ok response', function (): void {
    $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

    $privateMessages = \App\Models\PrivateMessage::factory()->times(3)->create();

    $response = $this->post(route('mark-all-read'), [
        // TODO: send request data
    ]);

    $response->assertOk();

    // TODO: perform additional assertions
});

test('reply private message returns an ok response', function (): void {
    $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

    $privateMessage = \App\Models\PrivateMessage::factory()->create();

    $response = $this->post(route('reply-pm', ['id' => $privateMessage->id]), [
        // TODO: send request data
    ]);

    $response->assertOk();

    // TODO: perform additional assertions
});

test('search p m inbox returns an ok response', function (): void {
    $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

    $privateMessages = \App\Models\PrivateMessage::factory()->times(3)->create();

    $response = $this->post(route('searchPMInbox'), [
        // TODO: send request data
    ]);

    $response->assertOk();
    $response->assertViewIs('user.pm.index');
    $response->assertViewHas('pms');
    $response->assertViewHas('user');

    // TODO: perform additional assertions
});

test('search p m outbox returns an ok response', function (): void {
    $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

    $privateMessages = \App\Models\PrivateMessage::factory()->times(3)->create();

    $response = $this->post(route('searchPMOutbox'), [
        // TODO: send request data
    ]);

    $response->assertOk();
    $response->assertViewIs('user.pm.outbox');
    $response->assertViewHas('pms');
    $response->assertViewHas('user');

    // TODO: perform additional assertions
});

test('send private message returns an ok response', function (): void {
    $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

    $user = \App\Models\User::factory()->create();

    $response = $this->post(route('send-pm'), [
        // TODO: send request data
    ]);

    $response->assertOk();

    // TODO: perform additional assertions
});

// test cases...
