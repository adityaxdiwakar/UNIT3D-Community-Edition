<?php

uses(RefreshDatabase::class);

test('accept rules returns an ok response', function (): void {
    $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');



    $response = $this->post(route('accept.rules'), [
        // TODO: send request data
    ]);

    $response->assertOk();

    // TODO: perform additional assertions
});

test('change api token returns an ok response', function (): void {
    $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

    $user = \App\Models\User::factory()->create();

    $response = $this->post(route('change_api_token', ['username' => $user->username]), [
        // TODO: send request data
    ]);

    $response->assertOk();

    // TODO: perform additional assertions
});

test('change p i d returns an ok response', function (): void {
    $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

    $user = \App\Models\User::factory()->create();

    $response = $this->post(route('change_pid', ['username' => $user->username]), [
        // TODO: send request data
    ]);

    $response->assertOk();

    // TODO: perform additional assertions
});

test('change r i d returns an ok response', function (): void {
    $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

    $user = \App\Models\User::factory()->create();

    $response = $this->post(route('change_rid', ['username' => $user->username]), [
        // TODO: send request data
    ]);

    $response->assertOk();

    // TODO: perform additional assertions
});

test('edit profile returns an ok response', function (): void {
    $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

    $user = \App\Models\User::factory()->create();

    $response = $this->post(route('user_edit_profile', ['username' => $user->username]), [
        // TODO: send request data
    ]);

    $response->assertOk();

    // TODO: perform additional assertions
});

test('edit profile form returns an ok response', function (): void {
    $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

    $user = \App\Models\User::factory()->create();

    $response = $this->get(route('user_edit_profile_form', ['username' => $user->username]));

    $response->assertOk();
    $response->assertViewIs('user.profile.edit');
    $response->assertViewHas('user', $user);
    $response->assertViewHas('route');

    // TODO: perform additional assertions
});

test('security returns an ok response', function (): void {
    $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

    $user = \App\Models\User::factory()->create();

    $response = $this->get(route('user_security', ['username' => $user->username]));

    $response->assertOk();
    $response->assertViewIs('user.settings.security.index');
    $response->assertViewHas('user', $user);

    // TODO: perform additional assertions
});

test('show returns an ok response', function (): void {
    $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

    $user = \App\Models\User::factory()->create();
    $invite = \App\Models\Invite::factory()->create();
    $groups = \App\Models\Group::factory()->times(3)->create();
    $warnings = \App\Models\Warning::factory()->times(3)->create();

    $response = $this->get(route('users.show', ['username' => $user->username]));

    $response->assertOk();
    $response->assertViewIs('user.profile.show');
    $response->assertViewHas('route');
    $response->assertViewHas('user', $user);
    $response->assertViewHas('groups', $groups);
    $response->assertViewHas('followers');
    $response->assertViewHas('history');
    $response->assertViewHas('warnings', $warnings);
    $response->assertViewHas('hitrun');
    $response->assertViewHas('realdownload');
    $response->assertViewHas('def_download');
    $response->assertViewHas('his_down');
    $response->assertViewHas('free_down');
    $response->assertViewHas('realupload');
    $response->assertViewHas('def_upload');
    $response->assertViewHas('his_upl');
    $response->assertViewHas('multi_upload');
    $response->assertViewHas('bonupload');
    $response->assertViewHas('man_upload');
    $response->assertViewHas('requested');
    $response->assertViewHas('filled');
    $response->assertViewHas('invitedBy');
    $response->assertViewHas('clients');
    $response->assertViewHas('achievements');

    // TODO: perform additional assertions
});

// test cases...
