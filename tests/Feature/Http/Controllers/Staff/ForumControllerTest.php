<?php

uses(RefreshDatabase::class);

test('create returns an ok response', function (): void {
    $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

    $forums = \App\Models\Forum::factory()->times(3)->create();
    $groups = \App\Models\Group::factory()->times(3)->create();

    $response = $this->get(route('staff.forums.create'));

    $response->assertOk();
    $response->assertViewIs('Staff.forum.create');
    $response->assertViewHas('categories');
    $response->assertViewHas('groups', $groups);

    // TODO: perform additional assertions
});

test('destroy returns an ok response', function (): void {
    $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

    $forum = \App\Models\Forum::factory()->create();
    $permissions = \App\Models\Permission::factory()->times(3)->create();

    $response = $this->delete(route('staff.forums.destroy', ['id' => $forum->id]));

    $response->assertOk();
    $this->assertModelMissing($staff.forum);

    // TODO: perform additional assertions
});

test('edit returns an ok response', function (): void {
    $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

    $forum = \App\Models\Forum::factory()->create();
    $forums = \App\Models\Forum::factory()->times(3)->create();
    $groups = \App\Models\Group::factory()->times(3)->create();

    $response = $this->get(route('staff.forums.edit', ['id' => $forum->id]));

    $response->assertOk();
    $response->assertViewIs('Staff.forum.edit');
    $response->assertViewHas('categories');
    $response->assertViewHas('groups', $groups);
    $response->assertViewHas('forum', $forum);

    // TODO: perform additional assertions
});

test('index returns an ok response', function (): void {
    $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

    $forums = \App\Models\Forum::factory()->times(3)->create();

    $response = $this->get(route('staff.forums.index'));

    $response->assertOk();
    $response->assertViewIs('Staff.forum.index');
    $response->assertViewHas('categories');

    // TODO: perform additional assertions
});

test('store returns an ok response', function (): void {
    $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

    $permission = \App\Models\Permission::factory()->create();
    $groups = \App\Models\Group::factory()->times(3)->create();

    $response = $this->post(route('staff.forums.store'), [
        // TODO: send request data
    ]);

    $response->assertOk();

    // TODO: perform additional assertions
});

test('store validates with a form request', function (): void {
    $this->assertActionUsesFormRequest(
        \App\Http\Controllers\Staff\ForumController::class,
        'store',
        \App\Http\Requests\Staff\StoreForumRequest::class
    );
});

test('update returns an ok response', function (): void {
    $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

    $permission = \App\Models\Permission::factory()->create();
    $forum = \App\Models\Forum::factory()->create();
    $groups = \App\Models\Group::factory()->times(3)->create();

    $response = $this->post(route('staff.forums.update', ['id' => $forum->id]), [
        // TODO: send request data
    ]);

    $response->assertOk();

    // TODO: perform additional assertions
});

test('update validates with a form request', function (): void {
    $this->assertActionUsesFormRequest(
        \App\Http\Controllers\Staff\ForumController::class,
        'update',
        \App\Http\Requests\Staff\UpdateForumRequest::class
    );
});

// test cases...
