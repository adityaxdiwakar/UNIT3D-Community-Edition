<?php

use App\Http\Controllers\Staff\GroupController;
use App\Http\Requests\Staff\StoreGroupRequest;
use App\Http\Requests\Staff\UpdateGroupRequest;
use App\Models\Forum;
use App\Models\Group;
use Illuminate\Foundation\Testing\RefreshDatabase;

uses(RefreshDatabase::class);

test('create returns an ok response', function (): void {
    $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');



    $response = $this->get(route('staff.groups.create'));

    $response->assertOk();
    $response->assertViewIs('Staff.group.create');

    // TODO: perform additional assertions
});

test('edit returns an ok response', function (): void {
    $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

    $group = Group::factory()->create();

    $response = $this->get(route('staff.groups.edit', ['id' => $group->id]));

    $response->assertOk();
    $response->assertViewIs('Staff.group.edit');
    $response->assertViewHas('group', $group);

    // TODO: perform additional assertions
});

test('index returns an ok response', function (): void {
    $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

    $groups = Group::factory()->times(3)->create();

    $response = $this->get(route('staff.groups.index'));

    $response->assertOk();
    $response->assertViewIs('Staff.group.index');
    $response->assertViewHas('groups', $groups);

    // TODO: perform additional assertions
});

test('store returns an ok response', function (): void {
    $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

    $forums = Forum::factory()->times(3)->create();

    $response = $this->post(route('staff.groups.store'), [
        // TODO: send request data
    ]);

    $response->assertOk();

    // TODO: perform additional assertions
});

test('store validates with a form request', function (): void {
    $this->assertActionUsesFormRequest(
        GroupController::class,
        'store',
        StoreGroupRequest::class
    );
});

test('update returns an ok response', function (): void {
    $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

    $group = Group::factory()->create();

    $response = $this->post(route('staff.groups.update', ['id' => $group->id]), [
        // TODO: send request data
    ]);

    $response->assertOk();

    // TODO: perform additional assertions
});

test('update validates with a form request', function (): void {
    $this->assertActionUsesFormRequest(
        GroupController::class,
        'update',
        UpdateGroupRequest::class
    );
});

// test cases...
