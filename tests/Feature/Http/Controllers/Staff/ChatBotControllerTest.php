<?php

use App\Http\Controllers\Staff\ChatBotController;
use App\Http\Requests\Staff\UpdateChatBotRequest;
use App\Models\Bot;
use Illuminate\Foundation\Testing\RefreshDatabase;

uses(RefreshDatabase::class);

test('destroy returns an ok response', function (): void {
    $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

    $bot = Bot::factory()->create();

    $response = $this->delete(route('staff.bots.destroy', ['id' => $id]));

    $response->assertOk();
    $this->assertModelMissing($staff.bot);

    // TODO: perform additional assertions
});

test('disable returns an ok response', function (): void {
    $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

    $bot = Bot::factory()->create();

    $response = $this->post(route('staff.bots.disable', ['id' => $id]), [
        // TODO: send request data
    ]);

    $response->assertOk();

    // TODO: perform additional assertions
});

test('edit returns an ok response', function (): void {
    $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

    $bot = Bot::factory()->create();

    $response = $this->get(route('staff.bots.edit', ['id' => $id]));

    $response->assertOk();
    $response->assertViewIs('Staff.chat.bot.edit');
    $response->assertViewHas('user');
    $response->assertViewHas('bot', $bot);

    // TODO: perform additional assertions
});

test('enable returns an ok response', function (): void {
    $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

    $bot = Bot::factory()->create();

    $response = $this->post(route('staff.bots.enable', ['id' => $id]), [
        // TODO: send request data
    ]);

    $response->assertOk();

    // TODO: perform additional assertions
});

test('index returns an ok response', function (): void {
    $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

    $bots = Bot::factory()->times(3)->create();

    $response = $this->get(route('staff.bots.index'));

    $response->assertOk();
    $response->assertViewIs('Staff.chat.bot.index');
    $response->assertViewHas('bots', $bots);

    // TODO: perform additional assertions
});

test('update returns an ok response', function (): void {
    $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');



    $response = $this->patch(route('staff.bots.update', ['id' => $id]), [
        // TODO: send request data
    ]);

    $response->assertOk();

    // TODO: perform additional assertions
});

test('update validates with a form request', function (): void {
    $this->assertActionUsesFormRequest(
        ChatBotController::class,
        'update',
        UpdateChatBotRequest::class
    );
});

// test cases...
