<?php

use App\Http\Controllers\Staff\MediaLanguageController;
use App\Http\Requests\Staff\StoreMediaLanguageRequest;
use App\Http\Requests\Staff\UpdateMediaLanguageRequest;
use App\Models\MediaLanguage;
use Illuminate\Foundation\Testing\RefreshDatabase;

uses(RefreshDatabase::class);

test('create returns an ok response', function (): void {
    $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');



    $response = $this->get(route('staff.media_languages.create'));

    $response->assertOk();
    $response->assertViewIs('Staff.media_language.create');

    // TODO: perform additional assertions
});

test('destroy returns an ok response', function (): void {
    $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

    $mediaLanguage = MediaLanguage::factory()->create();

    $response = $this->delete(route('staff.media_languages.destroy', ['id' => $mediaLanguage->id]));

    $response->assertOk();
    $this->assertModelMissing($staff.mediaLanguage);

    // TODO: perform additional assertions
});

test('edit returns an ok response', function (): void {
    $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

    $mediaLanguage = MediaLanguage::factory()->create();

    $response = $this->get(route('staff.media_languages.edit', ['id' => $mediaLanguage->id]));

    $response->assertOk();
    $response->assertViewIs('Staff.media_language.edit');
    $response->assertViewHas('media_language');

    // TODO: perform additional assertions
});

test('index returns an ok response', function (): void {
    $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

    $mediaLanguages = MediaLanguage::factory()->times(3)->create();

    $response = $this->get(route('staff.media_languages.index'));

    $response->assertOk();
    $response->assertViewIs('Staff.media_language.index');
    $response->assertViewHas('media_languages');

    // TODO: perform additional assertions
});

test('store returns an ok response', function (): void {
    $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');



    $response = $this->post(route('staff.media_languages.store'), [
        // TODO: send request data
    ]);

    $response->assertOk();

    // TODO: perform additional assertions
});

test('store validates with a form request', function (): void {
    $this->assertActionUsesFormRequest(
        MediaLanguageController::class,
        'store',
        StoreMediaLanguageRequest::class
    );
});

test('update returns an ok response', function (): void {
    $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

    $mediaLanguage = MediaLanguage::factory()->create();

    $response = $this->post(route('staff.media_languages.update', ['id' => $mediaLanguage->id]), [
        // TODO: send request data
    ]);

    $response->assertOk();

    // TODO: perform additional assertions
});

test('update validates with a form request', function (): void {
    $this->assertActionUsesFormRequest(
        MediaLanguageController::class,
        'update',
        UpdateMediaLanguageRequest::class
    );
});

// test cases...
