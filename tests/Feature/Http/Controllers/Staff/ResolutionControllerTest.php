<?php

use App\Http\Controllers\Staff\ResolutionController;
use App\Http\Requests\Staff\StoreResolutionRequest;
use App\Http\Requests\Staff\UpdateResolutionRequest;
use App\Models\Resolution;
use Illuminate\Foundation\Testing\RefreshDatabase;

uses(RefreshDatabase::class);

test('create returns an ok response', function (): void {
    $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');



    $response = $this->get(route('staff.resolutions.create'));

    $response->assertOk();
    $response->assertViewIs('Staff.resolution.create');

    // TODO: perform additional assertions
});

test('destroy returns an ok response', function (): void {
    $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

    $resolution = Resolution::factory()->create();

    $response = $this->delete(route('staff.resolutions.destroy', ['id' => $resolution->id]));

    $response->assertOk();
    $this->assertModelMissing($staff.resolution);

    // TODO: perform additional assertions
});

test('edit returns an ok response', function (): void {
    $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

    $resolution = Resolution::factory()->create();

    $response = $this->get(route('staff.resolutions.edit', ['id' => $resolution->id]));

    $response->assertOk();
    $response->assertViewIs('Staff.resolution.edit');
    $response->assertViewHas('resolution', $resolution);

    // TODO: perform additional assertions
});

test('index returns an ok response', function (): void {
    $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

    $resolutions = Resolution::factory()->times(3)->create();

    $response = $this->get(route('staff.resolutions.index'));

    $response->assertOk();
    $response->assertViewIs('Staff.resolution.index');
    $response->assertViewHas('resolutions', $resolutions);

    // TODO: perform additional assertions
});

test('store returns an ok response', function (): void {
    $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');



    $response = $this->post(route('staff.resolutions.store'), [
        // TODO: send request data
    ]);

    $response->assertOk();

    // TODO: perform additional assertions
});

test('store validates with a form request', function (): void {
    $this->assertActionUsesFormRequest(
        ResolutionController::class,
        'store',
        StoreResolutionRequest::class
    );
});

test('update returns an ok response', function (): void {
    $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

    $resolution = Resolution::factory()->create();

    $response = $this->patch(route('staff.resolutions.update', ['id' => $resolution->id]), [
        // TODO: send request data
    ]);

    $response->assertOk();

    // TODO: perform additional assertions
});

test('update validates with a form request', function (): void {
    $this->assertActionUsesFormRequest(
        ResolutionController::class,
        'update',
        UpdateResolutionRequest::class
    );
});

// test cases...
