<?php

uses(RefreshDatabase::class);

test('create returns an ok response', function (): void {
    $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');



    $response = $this->get(route('staff.pages.create'));

    $response->assertOk();
    $response->assertViewIs('Staff.page.create');

    // TODO: perform additional assertions
});

test('destroy returns an ok response', function (): void {
    $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

    $page = \App\Models\Page::factory()->create();

    $response = $this->delete(route('staff.pages.destroy', ['id' => $page->id]));

    $response->assertOk();
    $this->assertModelMissing($staff.page);

    // TODO: perform additional assertions
});

test('edit returns an ok response', function (): void {
    $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

    $page = \App\Models\Page::factory()->create();

    $response = $this->get(route('staff.pages.edit', ['id' => $page->id]));

    $response->assertOk();
    $response->assertViewIs('Staff.page.edit');
    $response->assertViewHas('page', $page);

    // TODO: perform additional assertions
});

test('index returns an ok response', function (): void {
    $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

    $pages = \App\Models\Page::factory()->times(3)->create();

    $response = $this->get(route('staff.pages.index'));

    $response->assertOk();
    $response->assertViewIs('Staff.page.index');
    $response->assertViewHas('pages', $pages);

    // TODO: perform additional assertions
});

test('store returns an ok response', function (): void {
    $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');



    $response = $this->post(route('staff.pages.store'), [
        // TODO: send request data
    ]);

    $response->assertOk();

    // TODO: perform additional assertions
});

test('store validates with a form request', function (): void {
    $this->assertActionUsesFormRequest(
        \App\Http\Controllers\Staff\PageController::class,
        'store',
        \App\Http\Requests\Staff\StorePageRequest::class
    );
});

test('update returns an ok response', function (): void {
    $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

    $page = \App\Models\Page::factory()->create();

    $response = $this->post(route('staff.pages.update', ['id' => $page->id]), [
        // TODO: send request data
    ]);

    $response->assertOk();

    // TODO: perform additional assertions
});

test('update validates with a form request', function (): void {
    $this->assertActionUsesFormRequest(
        \App\Http\Controllers\Staff\PageController::class,
        'update',
        \App\Http\Requests\Staff\UpdatePageRequest::class
    );
});

// test cases...
