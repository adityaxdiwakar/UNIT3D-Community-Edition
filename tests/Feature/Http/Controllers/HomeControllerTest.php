<?php

uses(RefreshDatabase::class);

test('index returns an ok response', function (): void {
    $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

    $poll = \App\Models\Poll::factory()->create();
    $articles = \App\Models\Article::factory()->times(3)->create();
    $torrents = \App\Models\Torrent::factory()->times(3)->create();
    $movies = \App\Models\Movie::factory()->times(3)->create();
    $tvs = \App\Models\Tv::factory()->times(3)->create();
    $topics = \App\Models\Topic::factory()->times(3)->create();
    $posts = \App\Models\Post::factory()->times(3)->create();
    $users = \App\Models\User::factory()->times(3)->create();
    $groups = \App\Models\Group::factory()->times(3)->create();
    $featuredTorrents = \App\Models\FeaturedTorrent::factory()->times(3)->create();
    $freeleechTokens = \App\Models\FreeleechToken::factory()->times(3)->create();
    $bookmarks = \App\Models\Bookmark::factory()->times(3)->create();

    $response = $this->get(route('home.index'));

    $response->assertOk();
    $response->assertViewIs('home.index');
    $response->assertViewHas('user');
    $response->assertViewHas('personal_freeleech');
    $response->assertViewHas('users', $users);
    $response->assertViewHas('groups', $groups);
    $response->assertViewHas('articles', $articles);
    $response->assertViewHas('newest');
    $response->assertViewHas('seeded');
    $response->assertViewHas('dying');
    $response->assertViewHas('leeched');
    $response->assertViewHas('dead');
    $response->assertViewHas('topics', $topics);
    $response->assertViewHas('posts', $posts);
    $response->assertViewHas('featured');
    $response->assertViewHas('poll', $poll);
    $response->assertViewHas('uploaders');
    $response->assertViewHas('past_uploaders');
    $response->assertViewHas('freeleech_tokens');
    $response->assertViewHas('bookmarks', $bookmarks);

    // TODO: perform additional assertions
});

// test cases...
